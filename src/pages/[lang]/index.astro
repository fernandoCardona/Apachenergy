---
// @ts-nocheck
import Layout from '../../layouts/Layout.astro';
import { languages, defaultLang } from '../../i18n/config'; // Asegúrate de importar defaultLang
import Screen1 from '../../components/screens/Screen1.astro';
import Screen2 from '../../components/screens/Screen2.astro';
import Screen3 from '../../components/screens/Screen3.astro';
import Screen4 from '../../components/screens/Screen4.astro';
import Screen5 from '../../components/screens/Screen5.astro';
import Screen6 from '../../components/screens/Screen6.astro';
import Screen7 from '../../components/screens/Screen7.astro';
import Screen8 from '../../components/screens/Screen8.astro';
import Screen9 from '../../components/screens/Screen9.astro';
import Screen10 from '../../components/screens/Screen10.astro';
import Screen11 from '../../components/screens/Screen11.astro';
import Screen12 from '../../components/screens/Screen12.astro';
import Screen13 from '../../components/screens/Screen13.astro';
import Screen14 from '../../components/screens/Screen14.astro';

export function getStaticPaths() {
  return Object.keys(languages).map((lang) => ({ params: { lang } }));
}

const { lang } = Astro.params;
const title = lang === 'es' 
  ? 'Apache Energy - Consultora de Energías Renovables'
  : 'Apache Energy - Renewable Energy Consulting';
const description = lang === 'es'
  ? 'Consultora especialista en energías renovables y autoconsumo colectivo. Ayudamos a comunidades de propietarios a instalar y gestionar sistemas fotovoltaicos.'
  : 'Specialists in renewable energy and collective self-consumption consulting. We help property communities install and manage photovoltaic systems.';

const currentPath = Astro.url.pathname; // MODIFICADO: Usa Astro.url.pathname
---

<Layout title={title} description={description} lang={lang} currentPath={currentPath}>
  <main>
    <div id="lang-root" class="opacity-0 transition-opacity duration-700">
      <!-- --><Screen1 lang={lang} />
      <Screen2 lang={lang} /> 
      <Screen3 lang={lang} />
      <Screen4 lang={lang} />
      <Screen5 lang={lang} />
      <Screen6 lang={lang} />
      <Screen7 lang={lang} />
      <Screen8 lang={lang} />
      <Screen9 lang={lang} />
      <Screen10 lang={lang} />
      <Screen11 lang={lang} />
      <Screen12 lang={lang} />
      <Screen13 lang={lang} />
      <Screen14 lang={lang} />
    </div>
  </main>
</Layout>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const root = document.getElementById('lang-root');
    if (root) {
      root.classList.remove('opacity-0');
      root.classList.add('opacity-100');
    }
  });
</script>

<script>
  // @ts-nocheck
  import { gsap } from 'gsap';

  function hexToRgb(hex) {
    hex = hex.replace('#','');
    let bigint = parseInt(hex, 16);
    let r = (bigint >> 16) & 255;
    let g = (bigint >> 8) & 255;
    let b = bigint & 255;
    return { r, g, b };
  }
  
  function rgbToHex(r, g, b) {
    return "#" + [r, g, b].map(x => {
      const hex = x.toString(16);
      return hex.length === 1 ? '0' + hex : hex;
    }).join('');
  }
  
  function interpolateColor(color1, color2, factor) {
    const c1 = hexToRgb(color1);
    const c2 = hexToRgb(color2);
    const r = Math.round(c1.r + (c2.r - c1.r) * factor);
    const g = Math.round(c1.g + (c2.g - c1.g) * factor);
    const b = Math.round(c1.b + (c2.b - c1.b) * factor);
    return rgbToHex(r, g, b);
  }
  
  function updateGlobalColors(progress, targetIsDark) {
    const fromColor = targetIsDark ? '#ffffff' : '#121212';
    const toColor = targetIsDark ? '#121212' : '#ffffff';
    const newColor = interpolateColor(fromColor, toColor, progress);
  
    const header = document.querySelector('header');
    if(header) header.style.color = newColor;
    const langSelectBtn = document.getElementById('langSelectBtn');
    if(langSelectBtn) langSelectBtn.style.color = newColor;
  
    const hamburgerMenu = document.querySelector('.hamburger-menu');
    if(hamburgerMenu) {
      hamburgerMenu.style.color = newColor;
      const svgHamburger = hamburgerMenu.querySelector('svg');
      if(svgHamburger) {
        svgHamburger.setAttribute('stroke', newColor);
        if(svgHamburger.getAttribute('fill') !== 'none') {
          svgHamburger.setAttribute('fill', newColor);
        }
      }
    }
  
    const footerText = document.getElementById('footerText');
    if(footerText) footerText.style.color = newColor;
    const footerLine = document.getElementById('footerLine');
    if(footerLine) footerLine.style.backgroundColor = newColor;
  
    const socialLinks = document.querySelectorAll('.social-link');
    socialLinks.forEach(link => {
      link.style.color = newColor;
      const svg = link.querySelector('svg');
      if(svg) {
        svg.setAttribute('stroke', newColor);
        if(svg.getAttribute('fill') !== 'none') {
          svg.setAttribute('fill', newColor);
        }
      }
    });
    const socialLine = document.getElementById('socialLine');
    if(socialLine) socialLine.style.backgroundColor = newColor;
  
    const footerLogoIcon = document.getElementById('footerLogoIcon');
    if(footerLogoIcon) {
      const path = footerLogoIcon.querySelector('path');
      if(path) {
        path.setAttribute('fill', newColor);
      }
    }
  
    const headerLogo = document.querySelector('.logo-link svg');
    if(headerLogo) {
      const path = headerLogo.querySelector('path');
      if(path) {
        path.setAttribute('fill', newColor);
      }
    }
  }

  const sections = document.querySelectorAll("section");
  const images = document.querySelectorAll(".bg");
  const outerWrappers = gsap.utils.toArray(".outer");
  const innerWrappers = gsap.utils.toArray(".inner");
  
  document.addEventListener("wheel", handleWheel);
  document.addEventListener("touchstart", handleTouchStart);
  document.addEventListener("touchmove", handleTouchMove);
  document.addEventListener("touchend", handleTouchEnd);
  
  let listening = false,
      direction = "down",
      current,
      next = 0;
  
  const touch = {
    startX: 0,
    startY: 0,
    dx: 0,
    dy: 0,
    startTime: 0,
    dt: 0
  };
  
  const tlDefaults = {
    ease: "slow.inOut",
    duration: 1.25
  };
  
  gsap.set(outerWrappers, { yPercent: 100 });
  gsap.set(innerWrappers, { yPercent: -100 });
  
  function revealSectionHeading(defaultDelay = 0.5) {
    const nextSection = sections[next];
    if (!nextSection) return gsap.timeline();
  
    const nextHeadings = nextSection.querySelectorAll(
      '.section-heading, .section-heading-left, .section-heading-right, .section-heading-top, .section-heading-bottom'
    );
    if (!nextHeadings.length) return gsap.timeline();
  
    const tl = gsap.timeline();
    nextHeadings.forEach((heading) => {
      const customDelay = heading.dataset.delay ? parseFloat(heading.dataset.delay) : defaultDelay;
      
      let fromVars = {
        autoAlpha: 0,
        ease: "power2",
        duration: 1,
        delay: customDelay
      };
      if (heading.classList.contains('section-heading-left')) {
        fromVars.x = -50;
      } else if (heading.classList.contains('section-heading-right')) {
        fromVars.x = 100;
      } else if (heading.classList.contains('section-heading-top')) {
        fromVars.y = -100;
      } else if (heading.classList.contains('section-heading-bottom')) {
        fromVars.y = 100;
      } else {
        fromVars.y = 100;
      }
      tl.from(heading, fromVars, 0);
    });
  
    return tl;
  }
  
  function slideIn() {
    if (current !== undefined) gsap.set(sections[current], { zIndex: 0 });
  
    gsap.set(sections[next], { autoAlpha: 1, zIndex: 1 });
    gsap.set(images[next], { yPercent: 0 });
  
    const targetScreen = next + 1;
    const darkScreens = [3, 5, 7, 9, 11, 13];
    const targetIsDark = darkScreens.includes(targetScreen);
  
    const tl = gsap.timeline({
      paused: true,
      defaults: tlDefaults,
      onUpdate: function() {
        updateGlobalColors(this.progress(), targetIsDark);
      },
      onComplete: () => {
        listening = true;
        current = next;
        updateGlobalColors(1, targetIsDark);
        window.dispatchEvent(new CustomEvent('screenChanged', {
          detail: { screen: current }
        }));
      }
    })
    .to([outerWrappers[next], innerWrappers[next]], { yPercent: 0 }, 0)
    .from(images[next], { yPercent: 15 }, 0)
    .add(revealSectionHeading(), 0);
  
    if (current !== undefined) {
      tl.add(
        gsap.to(images[current], {
          yPercent: -15,
          ...tlDefaults
        }),
        0
      ).add(
        gsap.timeline()
          .set(outerWrappers[current], { yPercent: 100 })
          .set(innerWrappers[current], { yPercent: -100 })
          .set(images[current], { yPercent: 0 })
          .set(sections[current], { autoAlpha: 0 })
      );
    }
  
    tl.play(0);
  }
  
  function slideOut() {
    gsap.set(sections[current], { zIndex: 1 });
    gsap.set(sections[next], { autoAlpha: 1, zIndex: 0 });
    gsap.set([outerWrappers[next], innerWrappers[next]], { yPercent: 0 });
    gsap.set(images[next], { yPercent: 0 });
  
    const targetScreen = next + 1;
    const darkScreens = [3, 5, 7, 9, 11, 13];
    const targetIsDark = darkScreens.includes(targetScreen);
  
    const tl = gsap.timeline({
      defaults: tlDefaults,
      onUpdate: function() {
        updateGlobalColors(this.progress(), targetIsDark);
      },
      onComplete: () => {
        listening = true;
        current = next;
        updateGlobalColors(1, targetIsDark);
        window.dispatchEvent(new CustomEvent('screenChanged', {
          detail: { screen: current }
        }));
      }
    })
    .to(outerWrappers[current], { yPercent: 100 }, 0)
    .to(innerWrappers[current], { yPercent: -100 }, 0)
    .to(images[current], { yPercent: 15 }, 0)
    .from(images[next], { yPercent: -15 }, 0)
    .add(revealSectionHeading(), ">-1")
    .set(images[current], { yPercent: 0 });
  
    tl.play(0);
  }
  
  function navigateToScreenWithAnimation(targetScreen) {
    if (!listening || targetScreen === current) return;
    next = targetScreen;
    if (next > current) {
      direction = "down";
      slideIn();
    } else {
      direction = "up";
      slideOut();
    }
  }
  
  function handleDirection() {
    listening = false;
    if (direction === "down") {
      if (current < sections.length - 1) {
        next = current + 1;
        slideIn();
      } else {
        listening = true;
      }
    }
    if (direction === "up") {
      if (current > 0) {
        next = current - 1;
        slideOut();
      } else {
        listening = true;
      }
    }
  }
  
  function handleWheel(e) {
    if (!listening) return;
    if (current === 0 && e.wheelDeltaY > 0) {
      return;
    }
    const scrollThreshold = 50;
    if (Math.abs(e.wheelDeltaY) < scrollThreshold) {
      return;
    }
    direction = e.wheelDeltaY < 0 ? "down" : "up";
    handleDirection();
  }
  
  function handleTouchStart(e) {
    if (!listening) return;
    const t = e.changedTouches[0];
    touch.startX = t.pageX;
    touch.startY = t.pageY;
  }

  function handleTouchMove(e) {
    if (!listening) return;
    e.preventDefault();
  }

  function handleTouchEnd(e) {
    if (!listening) return;
    const t = e.changedTouches[0];
    touch.dx = t.pageX - touch.startX;
    touch.dy = t.pageY - touch.startY;
    if (current === 0 && touch.dy > 10) {
      return;
    }
    const touchThreshold = 50;
    if (Math.abs(touch.dy) < touchThreshold) {
      return;
    }
    if (touch.dy > 10) direction = "up";
    if (touch.dy < -10) direction = "down";
    handleDirection();
  }
  
  window.addEventListener('navigateToScreen', (e) => {
    navigateToScreenWithAnimation(e.detail.screen);
  });
  
  slideIn();
</script>